#!/usr/bin/env python3
"""
Simple utility to list unused IAM resources

Usage:
    wsh-report-unused-iam [options]
    wsh-report-unused-iam ( -h | --help )

Options:
    -f, --format=<format>         Table format: plain, simple, github, grid, fancy_grid,
                                  pipe, orgtbl, jira, presto, pretty, psql, rst, mediawiki,
                                  moinmoin, youtrack, html, unsafehtml, latex, latex_raw,
                                  latex_booktabs, latex_longtable, textile,
                                  tsv [default: simple]
    -e, --export                  Export report to file
    -o, --output-file=<file_name> File name for exported report [default: report-unused-iam.md]
    -h, --help                    Show this help message and exit
    --debug                       Show more verbose logging
"""

from tabulate import tabulate
import pandas as pd
import docopt
import logging
import sys
from wshutils.logger import WSHLog
from airiam.find_unused.find_unused import find_unused
from airiam.models import RuntimeReport


# Logging setup
_log = WSHLog(__file__)
_log.setLevel(logging.ERROR)
logging.captureWarnings(True)

pd.set_option("display.width", 120)
pd.set_option("display.max_colwidth", 120)


def message(message, report):
    print(message)
    if report is True:
        with open(options["--output-file"], "a") as f:
            f.write(message)


def report_unused(runtime_results: RuntimeReport, export_to_file) -> None:
    print(
        "\nIAM tool analysis report: Comprehensive review of IAM roles, permissions, and potential security risks conducted to ensure optimal AWS security posture.\n"
    )

    unused = runtime_results.get_unused()
    unused_users = unused["Users"]
    if len(unused_users) > 0:
        msg = f"## The following {len(unused_users)} users were found to be unused:"
        message(msg, export_to_file)
        users_data = []
        for user in unused_users:
            if user["LastUsed"] == -1:
                last_used = "Never"
            else:
                last_used = user["LastUsed"]
            users_data.append(
                {"User": user["UserName"], "LastUsed": last_used}
            )
        df_users = pd.DataFrame(users_data)
        message(
            tabulate(df_users, headers="keys", tablefmt=options["--format"]) + "\n",
            export_to_file,
        )
    else:
        msg = "## No unused users were found in the account.\n"
        message(msg, export_to_file)

    unused_access_keys = unused["UnusedActiveAccessKeys"]
    if len(unused_access_keys) > 0:
        msg = f"## The following {len(unused_access_keys)} active access keys aren't being used:\n"
        message(msg, export_to_file)
        access_keys_data = []
        for access_key_obj in unused_access_keys:
            access_keys_data.append(
                {
                    "User": access_key_obj["User"],
                    "AccessKey": access_key_obj["AccessKey"],
                    "DaysSinceLastUse": access_key_obj["DaysSinceLastUse"],
                }
            )
        df_access_keys = pd.DataFrame(access_keys_data)
        msg = (
            tabulate(df_access_keys, headers="keys", tablefmt=options["--format"])
            + "\n"
        )
        message(msg, export_to_file)
    else:
        msg = "## No unused access keys were found in the account.\n"
        message(msg, export_to_file)

    unused_console_login_profiles = unused["UnusedConsoleLoginProfiles"]
    if len(unused_console_login_profiles) > 0:
        msg = f"## The following {len(unused_console_login_profiles)} users have password access they aren't using:\n"
        message(msg, export_to_file)
        console_login_data = []
        for console_login_profile in unused_console_login_profiles:
            has_mfa = console_login_profile["MFAEnabled"]
            if has_mfa:
                console_login_data.append(
                    {
                        "User": console_login_profile["User"],
                        "MFA": "enabled",
                        "DaysSinceLastUse": console_login_profile["DaysSinceLastUse"],
                    }
                )
            else:
                console_login_data.append(
                    {
                        "User": console_login_profile["User"],
                        "MFA": "disabled",
                        "DaysSinceLastUse": console_login_profile["DaysSinceLastUse"],
                    }
                )
        df_console_login_profiles = pd.DataFrame(console_login_data)
        msg = (
            tabulate(
                df_console_login_profiles, headers="keys", tablefmt=options["--format"]
            )
            + "\n"
        )
        message(msg, export_to_file)
    else:
        msg = "## No unused Console Login Profiles were found in the account.\n"
        message(msg, export_to_file)

    unused_roles = unused["Roles"]
    if len(unused_roles) > 0:
        msg = f"## The following {len(unused_roles)} roles are unused:\n"
        message(msg, export_to_file)
        roles_data = []
        for role in unused_roles:
            if role["LastUsed"] == -1:
                last_used = "Never"
            else:
                last_used = role["LastUsed"]
            roles_data.append(
                {"UnusedRoles": role["RoleName"], "LastUsed": last_used}
            )
        df_roles = pd.DataFrame(roles_data)
        msg = tabulate(df_roles, headers="keys", tablefmt="pipe") + "\n"
        message(msg, export_to_file)
    else:
        msg = "## No unused roles were found in the account.\n"
        message(msg, export_to_file)

    unused_groups = unused["Groups"]
    if len(unused_groups) > 0:
        msg = f"## The following {len(unused_groups)} groups are redundant:\n"
        message(msg, export_to_file)
        groups_data = []
        for group in unused_groups:
            if len(group["AttachedManagedPolicies"] + group["GroupPolicyList"]) == 0:
                groups_data.append(
                    {"Group": group["GroupName"], "AttachedPolicy": "false"}
                )
            else:
                groups_data.append(
                    {"Group": group["GroupName"], "Members": "false"}
                )
        df_groups = pd.DataFrame(groups_data)
        msg = tabulate(df_groups, headers="keys", tablefmt=options["--format"]) + "\n"
        message(msg, export_to_file)
    else:
        msg = "## No redundant groups were found in the account.\n"
        message(msg, export_to_file)

    unused_policies = unused["Policies"]
    if len(unused_policies) > 0:
        msg = f"## The following {len(unused_policies)} policies are redundant:\n"
        message(msg, export_to_file)
        policies_data = []
        for policy in unused_policies:
            policies_data.append(
                {"Policy": policy["PolicyName"], "HasAttachement": "false"}
            )
        df_policies = pd.DataFrame(policies_data)
        msg = tabulate(df_policies, headers="keys", tablefmt=options["--format"]) + "\n"
        message(msg, export_to_file)
    else:
        msg = "## No unattached policies were found in the account.\n"
        message(msg, export_to_file)

    unused_policy_attachments = unused["PolicyAttachments"]
    if len(unused_policy_attachments) > 0:
        msg = f"## The following {len(unused_policy_attachments)} policy attachments are unused:\n"
        message(msg, export_to_file)
        policy_attachment_data = []
        for policy_attachment in unused_policy_attachments:
            principal = (
                policy_attachment.get("Role")
                or policy_attachment.get("User")
                or policy_attachment.get("Group")
            )
            policy_attachment_data.append(
                {
                    "Policy": principal,
                    "UnusedPrivileges": policy_attachment["PolicyArn"],
                }
            )
        df_policy_attachement = pd.DataFrame(policy_attachment_data)
        msg = (
            tabulate(
                df_policy_attachement, headers="keys", tablefmt=options["--format"]
            )
            + "\n"
        )
        message(msg, export_to_file)
    else:
        msg = "## No unused policy attachments were found in the account.\n"
        message(msg, export_to_file)


##############################################################################
# Main Script/Loop
##############################################################################


# main program function
def main(options):
    export_to_file = False
    if options["--debug"] is True:
        import logging

        _log.setLevel(logging.DEBUG)

    if options["--export"] is True:
        export_to_file = True

    for key, value in options.items():
        _log.debug("command-line options: {}: {}".format(key, value))

    runtime_results = find_unused(_log, None, False, 90, "find_unused")
    report_unused(runtime_results, export_to_file)


if __name__ == "__main__":
    try:
        options = docopt.docopt(__doc__)
        main(options)

    except docopt.DocoptExit:
        sys.exit(__doc__)
